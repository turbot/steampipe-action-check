---
name: Steampipe Check
author: Turbot
description: Run Steampipe mod controls and create annotations for Infrastructure as Code controls.
branding:
  color: red
  icon: shield
inputs:
  mod-url:
    description: "Mod URL to clone. Examples: https://github.com/turbot/steampipe-mod-aws-compliance"
    required: true
  mod-branch:
    description: 'Mod branch or tag to clone. Defaults to "main". Examples: main, release/v0.7, 0.5, 1.0.'
    required: false
    default: main
  checks:
    description: 'Space separated list of benchmarks and controls to run. Can also pass in as a multi-line string. Defaults to "all".'
    required: true
    default: all
  create-annotations:
    description: If true, create annotations in pull requests for controls that have a "path" additional dimension with the format `filename:linenumber`.
    required: false
    default: false
  additional-args:
    description: 'Space separated args to add to the "steampipe check" command.'
    required: false
  github-token:
    description: GitHub token used to push annotations and job summaries.
    required: false
    default: ${{ github.token }}
  create-snapshot:
    description: If true, will create a snapshot on Turbot Pipes.
    required: false
    default: false
  cloud-host:
    description: The host of your Turbot Pipes instance, defaults to https://pipes.turbot.com/
    required: false
    default: https://pipes.turbot.com/
  cloud-token:
    description: The Turbot Pipes token used to save snapshots, required if 'create-snapshot' is true.
    required: false

runs:
  using: composite
  steps:
    - name: Create temporary directories
      shell: bash
      id: make-temp-dir
      run: |
        # Create temporary directories for Steampipe and mod installation
        tmp=$(mktemp -d)
        tmp_mod_dir=$tmp/mod_dir
        mkdir -p $tmp_mod_dir
        echo "tmp-mod-dir=$tmp_mod_dir" >> $GITHUB_OUTPUT

    - name: Get mod
      shell: bash
      run: |
        # Clone and setup mod
        if [ -z "${{inputs.mod-branch}}" ]; then
          git clone --depth 1 "${{ inputs.mod-url }}" "${{ steps.make-temp-dir.outputs.tmp-mod-dir }}"
        else
          git clone --depth 1 -b "${{ inputs.mod-branch }}" --single-branch "${{ inputs.mod-url }}" "${{ steps.make-temp-dir.outputs.tmp-mod-dir }}"
        fi
        cd ${{ steps.make-temp-dir.outputs.tmp-mod-dir }}
        steampipe mod install
        cd -

    - name: Get checks
      id: get-checks
      shell: bash
      run: |
        # Convert multiline 'checks' input to single line arguments which we can send to 'check'
        if [ -z "${{ inputs.checks }}" ]
        then
          # default to all
          RunList="all"
        else
          RunList=
          while read line; do
            RunList="$RunList $line"
          done <<EOF
        ${{ inputs.checks }}
        EOF
        fi
        echo "run_list=$RunList" >> $GITHUB_OUTPUT

    - name: Run checks
      id: run-checks
      if: inputs.create-snapshot == false
      shell: bash
      run: |
        # Run Steampipe Check
        set +e
        if [ -z "${{ inputs.additional-args }}" ];then
          STEAMPIPE_DISPLAY_WIDTH=120 steampipe check ${{ steps.get-checks.outputs.run_list }} --output=brief --export=json,md --mod-location=${{ steps.make-temp-dir.outputs.tmp-mod-dir }}
        else
          STEAMPIPE_DISPLAY_WIDTH=120 steampipe check ${{ steps.get-checks.outputs.run_list }} --output=brief --export=json,md --mod-location=${{ steps.make-temp-dir.outputs.tmp-mod-dir }} ${{ inputs.additional-args }}
        fi
        echo "exit_code=$(echo $?)" >> $GITHUB_OUTPUT
        # ignore exit code now
        # this is so that the action does not fail if there's a non-zero exit code
        # we will take care of the exit code after we annotate
        exit 0

    - name: Run checks with snapshot
      id: run-checks-snapshot
      if: inputs.create-snapshot == true
      shell: bash
      env:
        STEAMPIPE_CLOUD_HOST: ${{ inputs.cloud-host }}
        STEAMPIPE_CLOUD_TOKEN: ${{ inputs.cloud-token }}
      run: |
        # Run Steampipe Check
        set +e
        if [ -z "${{ inputs.additional-args }}" ];then
          STEAMPIPE_DISPLAY_WIDTH=120 steampipe check ${{ steps.get-checks.outputs.run_list }} --share --output=brief --export=json,md --mod-location=${{ steps.make-temp-dir.outputs.tmp-mod-dir }}
        else
          STEAMPIPE_DISPLAY_WIDTH=120 steampipe check ${{ steps.get-checks.outputs.run_list }} --share --output=brief --export=json,md --mod-location=${{ steps.make-temp-dir.outputs.tmp-mod-dir }} ${{ inputs.additional-args }}
        fi
        echo "exit_code=$(echo $?)" >> $GITHUB_OUTPUT
        # ignore exit code now
        # this is so that the action does not fail if there's a non-zero exit code
        # we will take care of the exit code after we annotate
        exit 0

    - name: Setup Node
      if: inputs.create-annotations == true
      uses: actions/setup-node@v3

    - name: Annotate and summarize
      if: inputs.create-annotations == true
      shell: bash
      run: |
        node ${{ github.action_path }}/dist/index.js ${{ steps.get-checks.outputs.run_list }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Exit
      shell: bash
      run: |
        # Exit normally if there were no errors in the checks (no errors will exit with code of 1 or 0)
        if [[ ${{ steps.run-checks.outputs.exit_code }} -le 1 ]];then
          exit 0
        else
          exit ${{ steps.run-checks.outputs.exit_code }}
        fi
