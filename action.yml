---
name: Steampipe Check
author: Turbot
description: Run Steampipe mod controls and create annotations for Infrastructure as Code controls.
branding:
  color: red
  icon: shield
inputs:
  mod-url:
    description: "Mod URL to clone. Examples: https://github.com/turbot/steampipe-mod-aws-compliance"
    required: true
  mod-branch:
    description: 'Mod branch or tag to clone. Defaults to "main". Examples: main, release/v0.7, 0.5, 1.0.'
    required: false
    default: main
  checks:
    description: 'Space separated list of benchmarks and controls to run. Can also pass in as a multi-line string. Defaults to "all".'
    required: true
    default: all
  create-annotations:
    description: If true, create annotations in pull requests for controls that have a "path" additional dimension with the format `filename:linenumber`.
    required: false
    default: false
  additional-args:
    description: 'Space separated args to add to the "steampipe check" command.'
    required: false
  snapshot-type:
    description: If set to 'public' or 'private' will create a snapshot on Turbot Pipes _requires input 'pipes-token'_, other values or not being set will not.
    required: false
  pipes-token:
    description: The Turbot Pipes token used to save snapshots, required if 'snapshot-type' is set.
    required: false
  github-token:
    description: GitHub token used to push annotations and job summaries.
    required: false
    default: ${{ github.token }}
outputs:
  snapshot_url:
    description: The Turbot Pipes url of the snapshot if created.

runs:
  using: composite
  steps:
    - name: Create temporary directories
      shell: bash
      id: make-temp-dir
      run: |
        # Create temporary directories for Steampipe and mod installation
        tmp=$(mktemp -d)
        tmp_mod_dir=$tmp/mod_dir
        mkdir -p $tmp_mod_dir
        echo "tmp-mod-dir=$tmp_mod_dir" >> $GITHUB_OUTPUT

    - name: Get mod
      shell: bash
      run: |
        # Clone and setup mod
        if [ -z "${{inputs.mod-branch}}" ]; then
          git clone --depth 1 "${{ inputs.mod-url }}" "${{ steps.make-temp-dir.outputs.tmp-mod-dir }}"
        else
          git clone --depth 1 -b "${{ inputs.mod-branch }}" --single-branch "${{ inputs.mod-url }}" "${{ steps.make-temp-dir.outputs.tmp-mod-dir }}"
        fi
        cd ${{ steps.make-temp-dir.outputs.tmp-mod-dir }}
        steampipe mod install
        cd -

    - name: Get checks
      id: get-checks
      shell: bash
      run: |
        # Convert multiline 'checks' input to single line arguments which we can send to 'check'
        if [ -z "${{ inputs.checks }}" ]
        then
          # default to all
          RunList="all"
        else
          RunList=
          while read line; do
            RunList="$RunList $line"
          done <<EOF
        ${{ inputs.checks }}
        EOF
        fi
        echo "run_list=$RunList" >> $GITHUB_OUTPUT

    - name: Run checks
      id: run-checks
      shell: bash
      env:
        STEAMPIPE_CLOUD_HOST: pipes.turbot.com
        STEAMPIPE_CLOUD_TOKEN: ${{ inputs.pipes-token }}
        STEAMPIPE_CHECK_DISPLAY_WIDTH: 120
        STEAMPIPE_DISPLAY_WIDTH: 120
      run: |
        # Run Steampipe Check
        set +e
        SS=""
        CONTROL_OUTPUT="--output=brief"
        CONTROL_EXPORTS="--export=check-output.json --export=check-output.md --export=check-output.csv"

        # TODO: omit CONTROL_OUTPUT if --output in additional-args
        # TODO: remove --share / --snapshot / --mod-location from additional-args ...

        if [ "${{ inputs.snapshot-type }}" == "public" ];then
          SS="--share"
        elif [ "${{ inputs.snapshot-type }}" == "private" ];then
          SS="--snapshot"
        fi
        steampipe check ${{ steps.get-checks.outputs.run_list }} $CONTROL_OUTPUT $CONTROL_EXPORTS --mod-location=${{ steps.make-temp-dir.outputs.tmp-mod-dir }} $SS ${{ inputs.additional-args }} | tee /tmp/output.log
        EC=$?
        echo "exit_code=$EC" >> $GITHUB_OUTPUT
        echo "snapshot_url=$(cat /tmp/output.log | grep "Snapshot uploaded" | sed -e "s/^Snapshot uploaded to //")" >> $GITHUB_OUTPUT
        echo "$(cat check-output.md)" >> $GITHUB_STEP_SUMMARY

        # 0 ok, 1 alarms, 2 errors, these should exit ok - other codes should exit out with error code
        if [[ $EC -le 2 ]];then
          exit 0
        else
          exit $EC
        fi

    - name: Snapshot Url
      id: output-snapshot-url
      if: steps.run-checks.outputs.snapshot_url != ''
      run: |
        echo "${{ steps.run-checks.outputs.snapshot_url }}" >> $GITHUB_STEP_SUMMARY

    - name: Upload Artifacts
      id: upload-artifacts
      continue-on-error: true
      uses: actions/upload-artifact@v3
      with:
        name: exported-results
        path: ./check-output.*

    - name: Setup Node
      if: inputs.create-annotations == 'true'
      uses: actions/setup-node@v3

    - name: Annotate and summarize
      if: inputs.create-annotations == 'true'
      shell: bash
      run: |
        node ${{ github.action_path }}/dist/index.js ${{ steps.get-checks.outputs.run_list }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
