---
name: Steampipe Check
author: Turbot
description: Run Steampipe mod controls and create annotations for Infrastructure as Code controls.
branding:
  color: red
  icon: shield
inputs:
  mod_repository:
    description: Git URL of the mod that runs. This is passed verbatim to `git clone`.
    required: true
  mod_branch:
    description: The action will clone this branch from `mod_repository`. Defaults to the default branch.
    required: false
  checks:
    description: A list of benchmarks and controls to run (multi-line). Defaults to "all".
    required: false
    default: "all"
  search_path_prefix:
    description: Comma-separated list of prefixes to add to the beginning of the search path.
    required: false
  github_token:
    description: Personal access token (PAT) used to push annotations and job summary.
    required: false
    default: ${{ github.token }}

runs:
  using: composite
  steps:
    - name: Create temporary directories
      shell: bash
      id: make-temp-dir
      run: |
        # Create temporary directories for Steampipe and mod installation
        tmp=$(mktemp -d)
        tmp_mod_dir=$tmp/mod_dir
        mkdir -p $tmp_mod_dir
        echo "tmp-mod-dir=$tmp_mod_dir" >> $GITHUB_OUTPUT

    - name: Get mod
      shell: bash
      run: |
        # Clone and setup mod
        if [ -z "${{inputs.mod_branch}}" ]; then
          git clone --depth 1 "${{ inputs.mod_repository }}" "${{ steps.make-temp-dir.outputs.tmp-mod-dir }}"
        else
          git clone --depth 1 -b "${{ inputs.mod_branch }}" --single-branch "${{ inputs.mod_repository }}" "${{ steps.make-temp-dir.outputs.tmp-mod-dir }}"
        fi
        cd ${{ steps.make-temp-dir.outputs.tmp-mod-dir }}
        steampipe mod install
        cd -

    - name: Get checks
      id: get-checks
      shell: bash
      run: |
        # Convert multiline 'checks' input to single line arguments which we can send to 'check'
        if [ -z "${{ inputs.checks }}" ]
        then
          # default to all
          RunList="all"
        else
          RunList=
          while read line; do
            RunList="$RunList $line"
          done <<EOF
        ${{ inputs.checks }}
        EOF
        fi
        echo "run_list=$RunList" >> $GITHUB_OUTPUT

    - name: Run checks
      id: run-checks
      shell: bash
      run: |
        # Run Steampipe Check
        set +e
        if [ -z "${{ inputs.search_path_prefix }}" ];then
          STEAMPIPE_CHECK_DISPLAY_WIDTH=120 steampipe check ${{ steps.get-checks.outputs.run_list }} --output=brief --export=json,md --mod-location=${{ steps.make-temp-dir.outputs.tmp-mod-dir }}
        else
          STEAMPIPE_CHECK_DISPLAY_WIDTH=120 steampipe check ${{ steps.get-checks.outputs.run_list }} --output=brief --export=json,md --mod-location=${{ steps.make-temp-dir.outputs.tmp-mod-dir }} --search-path-prefix "${{ inputs.search_path_prefix }}"
        fi
        echo "exit_code=$(echo $?)" >> $GITHUB_OUTPUT
        # ignore exit code now
        # this is so that the action does not fail if there's a non-zero exit code
        # we will take care of the exit code after we annotate
        exit 0

    - name: Setup Node
      uses: actions/setup-node@v3

    - name: Annotate and summarize
      shell: bash
      run: |
        node ${{ github.action_path }}/dist/index.js ${{ steps.get-checks.outputs.run_list }}
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Exit
      shell: bash
      run: |
        # Exit normally if there were no errors in the checks (no errors will exit with code of 1 or 0)
        if [[ ${{ steps.run-checks.outputs.exit_code }} -le 1 ]];then
          exit 0
        else
          exit ${{ steps.run-checks.outputs.exit_code }}
        fi
